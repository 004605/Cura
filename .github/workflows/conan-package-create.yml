name: Create and Upload Conan package

on:
    workflow_call:
        inputs:
            project_name:
                required: true
                type: string

            recipe_id_full:
                required: true
                type: string

            build_id:
                required: true
                type: number

            build_info:
                required: false
                default: true
                type: boolean

            recipe_id_latest:
                required: false
                type: string

            runs_on:
                required: true
                type: string

            python_version:
                required: true
                type: string

            conan_config_branch:
                required: false
                type: string

            conan_logging_level:
                required: false
                type: string

            conan_clean_local_cache:
                required: false
                type: boolean
                default: false

            conan_upload_community:
                required: false
                default: true
                type: boolean

env:
    CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
    CONAN_LOG_RUN_TO_OUTPUT: 1
    CONAN_LOGGING_LEVEL: ${{ inputs.conan_logging_level }}
    CONAN_NON_INTERACTIVE: 1

jobs:
    conan-package-create:
        runs-on: ${{ inputs.runs_on }}

        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Setup Python and pip
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ inputs.python_version }}
                    cache: 'pip'
                    cache-dependency-path: .github/workflows/requirements-conan-package.txt

            -   name: Install Python requirements for runner
                run: pip install -r https://raw.githubusercontent.com/Ultimaker/Cura/main/.github/workflows/requirements-conan-package.txt
                #  Note the runner requirements are always installed from the main branch in the Ultimaker/Cura repo

            -   name: Install MacOS system requirements
                if: ${{ runner.os == 'Macos' }}
                run: brew install autoconf automake ninja

            # NOTE: Due to what are probably github issues, we have to remove the cache and reconfigure before the rest.
            #       This is maybe because grub caches the disk it uses last time, which is recreated each time.
            -   name: Install Linux system requirements
                if: ${{ runner.os == 'Linux' }}
                run: |
                    sudo rm /var/cache/debconf/config.dat
                    sudo dpkg --configure -a
                    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
                    sudo apt update
                    sudo apt upgrade
                    sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config flex bison -y

            -   name: Install GCC-12 on ubuntu-22.04
                if: ${{ startsWith(inputs.runs_on, 'ubuntu-22.04') }}
                run: |
                    sudo apt install g++-12 gcc-12 -y
                    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
                    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12

            -   name: Use GCC-10 on ubuntu-20.04
                if: ${{ startsWith(inputs.runs_on, 'ubuntu-20.04') }}
                run: |
                    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
                    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

            -   name: Create the default Conan profile
                run: conan profile new default --detect

            -   name: Get Conan configuration
                run: conan config install https://github.com/Ultimaker/conan-config.git -a "-b cs_remote"

            -   name: Create the Packages using lockfile
                if: ${{ inputs.build_info }}
                run: conan install ${{ inputs.recipe_id_full }} --build=missing --update --lockfile=conan.lock --lockfile-out=conan.lock

            -   name: Create the Packages
                if: ${{ ! inputs.build_info }}
                run: conan install ${{ inputs.recipe_id_full }} --build=missing --update

            -   name: Create the build info
                if: ${{ inputs.build_info }}
                run: conan_build_info --v2 create buildinfo.json --lockfile conan.lock --user ${{ secrets.CONAN_USER }} --password ${{ secrets.CONAN_PASS }}

            -   name: Upload the build info
                if: ${{ inputs.build_info }}
                run: |
                    conan_build_info --v2 publish buildinfo.json --url https://ultimaker.jfrog.io/artifactory --user ${{ secrets.CONAN_USER }} --password ${{ secrets.CONAN_PASS }}
                    conan_build_info --v2 stop

            -   name: Upload the Package(s) to CS
                if: always()
                run: |
                    conan upload ${{ inputs.recipe_id_full }} -r cs-conan-public --all -c           
